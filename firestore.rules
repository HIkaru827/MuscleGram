rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read any user profile data (for community features) but only write their own data
    // Note: Client-side filtering should hide sensitive data like email addresses from other users
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to read and write their own analytics data
      match /analytics/{exerciseName} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow users to read and write their own records
      match /records/{recordId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Workout posts: read by all, write only by owner
    match /workout_posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Personal records: read and write only by owner
    match /personal_records/{recordId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Comments: read by all, write with proper ownership
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Follows: read by all, write with proper ownership
    match /follows/{followId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.followerId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.followerId;
    }
    
    // Likes: read by all, write with proper ownership
    match /likes/{likeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Notifications: read only by recipient, create by any authenticated user, update/delete by recipient
    match /notifications/{notificationId} {
      // Recipients can read their own notifications
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.recipientId;
      
      // Any authenticated user can create notifications for others
      allow create: if request.auth != null && 
        request.resource.data.keys().hasAll(['type', 'title', 'message', 'recipientId']) &&
        request.resource.data.recipientId is string &&
        request.resource.data.type in ['like', 'comment', 'follow', 'achievement', 'reminder', 'mention'];
      
      // Recipients can update/delete their own notifications (e.g., mark as read)
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.recipientId;
    }
  }
}